Pppy
from datetime import datetime, timezone
from flask import Flask, render template, request, url_for, redirect, flash
from flask sqlalchemy import SQLAlchemy
from flask login import LoginManager, UserMixin, login user, logout_user, login_required, current_user
from sqlalchewy import func
app Flask(name_)
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///db.sqlite"
app.config["SECRET KEY"] = "root"
db SQLAlchemy (app)
login manager LoginManager()
login_manager.init_app(app)
class Users(UserMixin, db.Model):
id db.Column(db. Integer, primary_key=True)
username = db.Column(db.string(250), unique True, nullable=False)
password = db.Column(db.String(250), nullable-False)
class Cash(db.Model):
id db.Column(db. Integer, primary_key=True)
amount= db.column(db.Float, nullable=False)
reason db.column(db.String(250))
date db.Column(db.DateTime, default datetime.now(timezone.utc)) # Automatically set date on creation
user_id= db.Column(db.Integer, db. ForeignKey("users.id'), nullable=False) user db.relationship('Users', backref=db.backref('cash_entries', lazy=True))
class Expenses (db.Model):
id= db.Column(db.Integer, primary_key=True)
category db.Column(db.String(50), nullable False)
amount db.Column(db.Float, nullable=False)
date db.Column(db.DateTime, default-datetime.now(timezone.utc))
# Use timezone-aware UTC
user_id db.column(db.Integer, db. Foreignkey('users.id'), nullable False)
user = db.relationship("Users, backref-db.backref('expenses", lazy=True))
  @login_manager.user_loader
def load_user(user_id):
return db.session.get(Users, int(user_id))
@app.route("/", methods=["GET", "POST"])
def login():
if current_user.is_authenticated: return redirect(url_for("dashboard"))
if request.method = "POST":
user = Users.query.filter_by(username=request.form.get("username")).first()
if user and user.password == request.form.get("password"):
login_user(user)
return redirect(url_for("dashboard"))
else:
return render_template("login.html", error="Invalid username or password.")
return render_template("login.html")
@app.route("/register', methods=['GET', 'POST'])
def register():
if request.method="POST":
username request.form.get("username")
password = request.form.get("password")
#Check if username already exists
if Users.query.filter_by(username username).first():
Flash("Username already exists. Please choose a different one.")
return redirect(url_for("register"))
#Create new user
new_user = Users (username username, password-password)#Note: Consider hashing passwords!
db.session.add(new_user)
db.session.commit()
return redirect(url_for("login"))
return render_template("register.html")
